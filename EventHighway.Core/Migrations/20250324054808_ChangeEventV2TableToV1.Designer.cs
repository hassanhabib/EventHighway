// <auto-generated />
using System;
using EventHighway.Core.Brokers.Storages;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventHighway.Core.Migrations
{
    [DbContext(typeof(StorageBroker))]
    [Migration("20250324054808_ChangeEventV2TableToV1")]
    partial class ChangeEventV2TableToV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.EventAddresses.EventAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("EventAddresses");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.EventAddresses.V2.EventAddressV2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("EventAddressV2s");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.EventListeners.EventListener", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HeaderSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EventAddressId");

                    b.ToTable("EventListeners");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.EventListeners.V2.EventListenerV2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HeaderSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EventAddressId");

                    b.ToTable("EventListenerV2s");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EventAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EventAddressId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.Events.V1.EventV1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EventAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ScheduledDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EventAddressId");

                    b.ToTable("EventV1s");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.ListenerEvents.ListenerEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EventAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventListenerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EventAddressId");

                    b.HasIndex("EventId");

                    b.HasIndex("EventListenerId");

                    b.ToTable("ListenerEvents");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.ListenerEvents.V2.ListenerEventV2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EventAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventListenerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EventAddressId");

                    b.HasIndex("EventId");

                    b.HasIndex("EventListenerId");

                    b.ToTable("ListenerEventV2s");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.EventListeners.EventListener", b =>
                {
                    b.HasOne("EventHighway.Core.Models.Services.Foundations.EventAddresses.EventAddress", "EventAddress")
                        .WithMany("EventListeners")
                        .HasForeignKey("EventAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EventAddress");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.EventListeners.V2.EventListenerV2", b =>
                {
                    b.HasOne("EventHighway.Core.Models.Services.Foundations.EventAddresses.V2.EventAddressV2", "EventAddress")
                        .WithMany("EventListeners")
                        .HasForeignKey("EventAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EventAddress");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.Events.Event", b =>
                {
                    b.HasOne("EventHighway.Core.Models.Services.Foundations.EventAddresses.EventAddress", "EventAddress")
                        .WithMany("Events")
                        .HasForeignKey("EventAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EventAddress");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.Events.V1.EventV1", b =>
                {
                    b.HasOne("EventHighway.Core.Models.Services.Foundations.EventAddresses.V2.EventAddressV2", "EventAddress")
                        .WithMany("Events")
                        .HasForeignKey("EventAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EventAddress");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.ListenerEvents.ListenerEvent", b =>
                {
                    b.HasOne("EventHighway.Core.Models.Services.Foundations.EventAddresses.EventAddress", "EventAddress")
                        .WithMany("ListenerEvents")
                        .HasForeignKey("EventAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EventHighway.Core.Models.Services.Foundations.Events.Event", "Event")
                        .WithMany("ListenerEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EventHighway.Core.Models.Services.Foundations.EventListeners.EventListener", "EventListener")
                        .WithMany("ListenerEvents")
                        .HasForeignKey("EventListenerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("EventAddress");

                    b.Navigation("EventListener");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.ListenerEvents.V2.ListenerEventV2", b =>
                {
                    b.HasOne("EventHighway.Core.Models.Services.Foundations.EventAddresses.V2.EventAddressV2", "EventAddress")
                        .WithMany("ListenerEvents")
                        .HasForeignKey("EventAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EventHighway.Core.Models.Services.Foundations.Events.V1.EventV1", "Event")
                        .WithMany("ListenerEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EventHighway.Core.Models.Services.Foundations.EventListeners.V2.EventListenerV2", "EventListener")
                        .WithMany("ListenerEvents")
                        .HasForeignKey("EventListenerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("EventAddress");

                    b.Navigation("EventListener");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.EventAddresses.EventAddress", b =>
                {
                    b.Navigation("EventListeners");

                    b.Navigation("Events");

                    b.Navigation("ListenerEvents");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.EventAddresses.V2.EventAddressV2", b =>
                {
                    b.Navigation("EventListeners");

                    b.Navigation("Events");

                    b.Navigation("ListenerEvents");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.EventListeners.EventListener", b =>
                {
                    b.Navigation("ListenerEvents");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.EventListeners.V2.EventListenerV2", b =>
                {
                    b.Navigation("ListenerEvents");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.Events.Event", b =>
                {
                    b.Navigation("ListenerEvents");
                });

            modelBuilder.Entity("EventHighway.Core.Models.Services.Foundations.Events.V1.EventV1", b =>
                {
                    b.Navigation("ListenerEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
